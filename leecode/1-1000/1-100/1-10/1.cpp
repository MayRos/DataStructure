//<<<<<<< HEAD
/*
1. 两数之和
给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。

你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。

你可以按任意顺序返回答案。



示例 1：

输入：nums = [2,7,11,15], target = 9
输出：[0,1]
解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。
示例 2：

输入：nums = [3,2,4], target = 6
输出：[1,2]
示例 3：

输入：nums = [3,3], target = 6
输出：[0,1]


提示：

2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
只会存在一个有效答案
进阶：你可以想出一个时间复杂度小于 O(n2) 的算法吗？

*/
#include <iostream>
#include <vector>
#include <unordered_map>
using namespace std;
class Solution {
public:
    // 暴力
    vector<int> twoSum_bruce(vector<int>& nums, int target) {
        vector<int> res(2);
        for (int i = 0; i < nums.size() - 1; ++i) {
            for (int j = i + 1; j < nums.size(); j++) {
                if (nums[i] + nums[j] == target) {
                    res[0] = i;
                    res[1] = j;
                    return res;
                }
            }
        }
        return res;
    }
    // 排序后 相加
    void quickSort(const vector<int>& nums , vector<int>& index,int start,int end){
        if(start >= end){
            return;
        }
        int base = nums.at(index.at(end));
        int left = start;
        int right = end-1;
        while(left<right){
            while (nums.at(index.at(left)) <= base && left < right) {
                left++;
            }
            while (nums.at(index.at(right)) >= base && left < right) {
                right--;
            }
            int item = index.at(left);
            index.at(left) = index.at(right);
            index.at(right) = item;
        }
        if(nums.at(index.at(right))>base){
            int item = index.at(end);
            index.at(end) =  index.at(right);
            index.at(right)= item;
            quickSort(nums,index,start,left-1);
            quickSort(nums,index,left+1,end);
        }
        else {
            quickSort(nums, index, start, left);
        }
        
    }
    vector<int> twoSum_sort(vector<int>& nums, int target) {
        vector<int> index(nums.size()) ;
        for(int i = 0; i<nums.size();i++){
            index[i] = i;
        }
        vector<int> res(2);
        quickSort(nums,index,0,nums.size()-1);
        for (int i = 0; i <  nums.size()-1; i++) {
            if (nums[index[i]] > nums[index[i + 1]]) {
                cout << index[i]<<"  " << nums[index[i]] << endl;// = i;
            }
            
        }
        int left = 0;
        int right =nums.size()-1;
        while(nums[index[left]]+nums[index[right]]!= target &&left<right){
            while(nums[index[left]]+nums[index[right]]<target){
                left++;
            }
            while(nums[index[left]]+nums[index[right]]>target){
                right--;
            }
        }
        res[0] = index[left];
        res[1] = index[right];
        return res;
    }
    // hash
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> hashT;
        for (int i = 0; i < nums.size(); i++) {
            auto j = hashT.find(target - nums[i]);
            if (j != hashT.end()) {
                return {j->second,i };
            }
            hashT[nums[i]] = i;
        }
        return {};
    }
};
//int main() {
//    vector<int> nums = { -8525576, 2821699, 8376865, -9212317, 5207750, 7142430, 4359550, 5104325, -8054581, 9303446, -3478369,
//        -8348583, 6777365, 9388417, 5911004, 8924909, 7930494, -2687145, 6789728, 6140413, 3037810, 6839110, 7613859, -381356,
//        9848108, -3893960, -9260739, -1291602, -4431234, -9505752, -4313632, -6719920, -2615081, 5795961, 3293382, 6411875, -7460292,
//        2968015, 6026065, 3362676, -4436688, 9440912, -8513576, -3159450, -8998433, -4309718, -1987023, 210072, -1274570, 1024374,
//        -4697294, -3582515, -2732215, 850472, -5758747, -9657394, -3957063, -5721156, -9840913, 3798442, -1854013, 7972446, -3365366,
//        796810, 5502180, 9851730, -7783084, 7138877, 4455900, 5764296, 3230660, 6546995, -9100443, -736500, -673663, -8287547,
//        5628134, 8925235, -7563102, -9650994, -7925698, 2522927, 2381245, -7729316, 3943295, 296501, 7393804, -6014735, 8078828,
//        1334481, 4738427, 7557845, 2716149, -688559, -2383430, -6362840, -2480316, 39696, 6400502, 2960375, 4823357, 9206169,
//        3069186, 7043284, -7737620, 6111430, 6481195, -6833906, -7808409, -2520456, -1441273, 8312357, 1098423, 620019, 7206181,
//        2559811, 4153201, -9987166, 4643768, -7267277, 1968598, -4387785, -8995279, -3462145, 139934, -5065871, -3105906, 1073424,
//        -5491921, -8893820, -3308790, 1415168, 6474889, 2477914, -7821473, -6963465, -5038661, -8892789, -322340, 7467552, -1650191,
//        -2165286, -1840127, 9099481, 4672231, -2952557, 2538745, -4869459, -8611986, 1695017, 5587406, -1638557, -9741243, 8303637,
//        9555184, -8938516, -5753781, -8495406, -4880080, 5039978, -7154802, 9017353, 2924829, 3454971, -3821240, -9791203, -21599,
//        -1951327, -7029101, 5115018, -1591411, 4662075, -5844339, 6058599, -1299646, -5858539, 8618193, 9602540, 1181513, -5160496,
//        -6644134, 6534717, 5558140, 8853890, 8395423, -51610, 5722960, 8205114, 8653613, -1774666, 7732664, -8883501, -4783769, -1975780,
//        -5940120, -4007489, -9406777, 4889483, -7315707, -7426593, 3055469, 3423448, -8609993, -8326412, 4379103, -8267110, -9432734,
//        -114879, -3766165, 4779158, 547417, 9746352, 8796956, -7421240, -8323062, 2818763, -9937655, 2190708, -6150224, 2391430, 7270317,
//        -1691374, 6993405, 8388364, -7092092, -3228318, 744072, -1847252, 1447350, -2127548, -6070501, -734035, -4785694, 9822102,
//        2776903, 1506289, 1812526, -2379670, 1707270, -9509152, -6253365, -4982599, 9455837, 6581402, 721376, 3881667, 8298993, -166709,
//        -1179212, -353220, 7537049, 5758238, -6262558, 3205396, -2991279, -1170936, -5807440, 6443338, 644818, 19920, 5394339, -6662867,
//        -9727166, 9066255, -5213538, 2551041, -2034945, -4619989, -7771121, -1621444, 6122601, 4625771, 9638438, 7157430, 9345501,
//        -419132, -9494998, -3893011, 2683368, 8166123, 2207847, 1987730, -4085018, 9878497, 6883868, 7814352, 8103989, 5271281, -6989257,
//        2891524, 1391179, -121390, 4370650, 1762431, -7350206, 3327644, -4552333, -5582739, 4135800, -6469588, 8985894, 2283798, -4976683,
//        -2122622, -3560088, 4581541, 688503, 1596164, 6653622, 7532293, 2073015, -8012770, 1896913, -9791902, 6555385, -6872850, -8750543,
//        8455338, -279299, -2770375, 1023909, -1076916, -2293185, 5812978, 4939172, -5046465, 1004182, 4743763, -6415924, 5625775, 7131805,
//        -7160873, 7218936, -9150014, 7548922, -675583, -8385432, -3225402, -772872, -8715530, 538414, -5945506, -7737867, -8135344,
//        -4420258, -8067908, -7668874, -6404894, -4392786, 4906411, -3632338, 1480213, 8578242, 8615344, -9344965, -9237936, 8891393,
//        -426543, 2793325, -7740687, 8351499, 8178662, 9690668, 5554374, -7955894, -8385818, 8815958, -3932346, -2485860, -9964645,
//        -2979727, 550711, 8114291, -5960488, 7966835, -5190445, 9208118, -5587368, 3716432, 1571125, 9823037, 7035016, 9576081,
//        -9201578, 4529158, -9771547, 7309954, 8598580, -8115425, 1011316, -9178024, 5761459, 2509040, 817780, -816184, -8314208,
//        -3395592, 1519354, -4703043, -9943732, 1296837, 7036941, -1208061, 1539298, -2489250, 6781577, 1641928, -4669629, -4659636,
//        5199667, 7449147, -9714069, -9890687, -9486738, 4602590, 7582705, 6697756, -8158382, 8436543, -834490, 8213182, 7955484, 9301788,
//        -3965915, 6695106, 2958046, 4220538, -1732263, 4603891, 1820413, -2375960, 3307322, -6897837, -7328396, 3994855, 1670457, 4802379,
//        9500275, -4973841, 6435679, -2508047, -2857945, 8787209, 5073647, 2437445, -6960737, 4894269, -6754068, -5951352, -8733915,
//        -9306475, -3069330, -9730016, -2396084, -562708, -6525755, -9193005, -7951496, 6972902, 7026903, -4227728, 5414457, 105055,
//        -6495, -1913030, 7710220, -9676812, 5250131, 5255425, 7462450, 299297, -7023339, 1749846, 3787409, 6276134, 8581007, -4863617,
//        5740055, 3220065, 8119352, -6690522, -6668242, -2705588, -3735505, 9854867, -870839, -7533875, 4258816, 7006651, 97611, 1484596,
//        447246, 8086362, -8195783, 7432420, -8064331, 4061543, -1759198, 827773, -2911087, -1801717, 5831302, 9632217, -5222985,
//        -2008043, 6370734, 6393722, 6613069, 3896613, 6447597, 7838593, 181922, 1794796, -7066675, 5994105, 8366300, -4970686, 1035095,
//        8294630, 2312342, 3694100, 7852462, 5632072, -2709999, -3497635, -1183085, -7997083, -5122712, 5591450, -887282, -4606981,
//        1303153, -7061717, 7463870, -1459331, -1519162, -2029137, 478053, 9781454, -9906134, 7536086, 7423964, 5706854, 6318344, 4869850,
//        -7066875, 2922225, -5129519, -2346798, -4041358, -1514009, -6964030, 467859, 9051351, -3170573, -5216420, 6325498, -4744077,
//        7351510, 1190966, -593265, 6213598, 2081417, -2342377, 238271, 4005953, -1968475, 4736518, 1027965, 2656156, 1916670, 2567170,
//        6363095, -9244914, -9646325, 1140048, 7640988, 3951040, 3526918, 8029098, 1242493, 1178720, -1638418, 1706933, 6205313, 3897809,
//        1335406, -1759712, 1676509, -9310336, -9153936, 8964478, -1242689, -4689574, 6806603, -8010723, 6758905, 5870218, -9363421,
//        2346856, -5739262, 1861410, -6073926, -3773123, 1166233, -8874291, -3854678, -5858916, 7232591, -7645941, -6110615, 2467538,
//        -590130, 4776092, -6075907, 2915401, -5496959, 7575289, -3095927, -8967252, 2822998, -3458667, 4203027, 2286731, -3600675,
//        9960082, -8925111, 5795919, -1263467, 8927344, -2190154, -6376786, -9944444, 2355972, -3664430, 8307464, -5817397, 386223,
//        -318487, -4578705, 1675925, -4425604, 1564198, -8288950, -7045187, -5419862, 5124080, 5160927, -242688, 5010164, -8424165,
//        9195589, 7913699, -5070000, 3140890, 4834001, 7363705, 937876, -779704, 9523987, -1868952, -5439574, -4525253, -4543448,
//        -9243626, 152422, 5490046, 9066345, 2574372, -4697965, 5197428, 9184963, -4007079, 9841805, 5487268, 2291071, -8057088,
//        8098150, 2592293, -7707396, -9093563, -1124539, -6606145 };
//
//    int i = -5703877;
//    Solution so;
//    vector<int> res = so.twoSum(nums, i);
//    std::cout << res[0] << "    " << res[1];
//}
